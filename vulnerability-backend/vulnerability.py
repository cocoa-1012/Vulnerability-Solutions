from datetime import datetime

import motor.motor_asyncio
from bson import ObjectId

from model import VulnerabilityOutput
from user import User

DATABASE_USER_NAME ='seth_eve'
DATABASE_PASSWORD='uP0ZIYnwpBxVjWO3'
# MongoDB Configurations
DATABASE_URL = f"mongodb+srv://{DATABASE_USER_NAME}:{DATABASE_PASSWORD}@cluster0.wsli1kg.mongodb.net/?retryWrites=true&w=majority"

client = motor.motor_asyncio.AsyncIOMotorClient(
    DATABASE_URL, uuidRepresentation="standard"
)

db = client['vulnerability_db']
vulnerability_tb = db['vulnerability']
user_tb = db['users']

async def list_users():
  # Perform the query
    cursor = user_tb.find({})  # This an async iterator
    results =[]
    async for document in cursor:        
        results.append(User(**document)) 
    return results


async def fetch_all_vulnerabilities(user):
    vulnerabilities = []
    cursor = vulnerability_tb.find({})
    
    async for document in cursor:        
        vulnerabilities.append(VulnerabilityOutput(**document))             

    return vulnerabilities

async def create_vulnerability(vulnerability):
    document = vulnerability
    result = await vulnerability_tb.insert_one(document)
    return document


async def update_vulnerability(id, body):
    print(body, body.cve)
    await vulnerability_tb.update_one({"_id": ObjectId(id)}, {"$set": {
        "type": body.type, "cve": body.cve, "name": body.name, "solution": body.solution
        , 'updatedAt': datetime.utcnow()
        }})
    document = await vulnerability_tb.find_one({"_id": ObjectId(id)})
    return document


async def fetch_one_vulnerability(id):
    document = await vulnerability_tb.find_one({"_id": ObjectId(id)})
    return document


async def remove_vulnerability(id):
    await vulnerability_tb.delete_one({"_id": ObjectId(id)})
    return True
