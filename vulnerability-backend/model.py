from datetime import datetime, timezone
from typing import Dict, Optional

from bson import ObjectId
from pydantic import BaseModel, Field


class PyObjectId(ObjectId):

    @classmethod
    def __get_validators__(cls):
        yield cls.validate

    @classmethod
    def validate(cls, v):
        if not ObjectId.is_valid(v):
            raise ValueError('Invalid objectid')
        return ObjectId(v)

    @classmethod
    def __modify_schema__(cls, field_schema):
        field_schema.update(type='string')


class VulnerabilityInput(BaseModel):
    type: str
    cve: str
    name: str
    solution: str
    user: str
    createdAt: datetime = Field(default_factory=datetime.utcnow)
    updatedAt: datetime = Field(default_factory=datetime.utcnow)


class VulnerabilityOutput(BaseModel):
    id: Optional[PyObjectId] = Field(alias='_id')
    type: str
    cve: str
    name: str
    solution: str
    user: str
    createdAt: datetime = Field(default_factory=datetime.utcnow)
    updatedAt: datetime = Field(default_factory=datetime.utcnow)
   

    class Config:
        arbitrary_types_allowed = True
        json_encoders = {
            ObjectId: str
        }
